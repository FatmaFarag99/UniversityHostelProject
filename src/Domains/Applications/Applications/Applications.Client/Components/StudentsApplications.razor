@page "/StudentsApplications"
@using SmartUI.Grid

@attribute [Authorize(Roles = "Admin")]

<div class="card card-custom card-primary card-outline">
    <div class="card-body">
        @if (!isLastApplicationOpened)
        {
            <p>
                There is not stage opened yet
            </p>
        }
        else
        {
            @if (!isDataLoaded)
            {
                <Spinner Show="true" />
            }
            else
            {
                <SmartGrid TSource="ApplicationGridViewModel" DataSource="applications" AllowPagination="true" SelectedItemCssClass="bg-white" QueryCellInfo="QueryCellInfoHandler">
                    <PaginationSettings PageSize="20" PageSizes="new List<int>{ 10, 20, 40, 50, 100, 500, 1000}" />
                    <GridColumns>
                        <GridColumn PropertyName="StudentName" Title="Student Name" AllowSorting="true" />
                        <GridColumn PropertyName="Level" Title="Level" AllowSorting="true" />
                        <GridColumn PropertyName="FacultyName" Title="Faculty Name" />
                        <GridColumn Title="Operations" CssClass="text-center">
                            <RowTemplate>
                                <a href="/StudentsApplications/@(((ApplicationGridViewModel)context).Id)" class="text-primary" title="view all information">
                                    <i class="fa fa-eye fa-2x"></i>
                                </a>
                            </RowTemplate>
                        </GridColumn>
                    </GridColumns>
                </SmartGrid>
            }
        }
    </div>
</div>
@code {
    private IEnumerable<ApplicationGridViewModel> applications;
    private bool isDataLoaded;
    private ApplicationStageViewModel applicationStage;
    private bool isLastApplicationOpened;

    protected override async Task OnInitializedAsync()
    {
        isLastApplicationOpened = await GetLastApplication();

        applications = await _applicationGridHttpService.GetAsync("api/Applications/Grid");
        isDataLoaded = true;
    }
    private void QueryCellInfoHandler(QueryCellInfoEventArgs<ApplicationGridViewModel> args)
    {
        if (args.Data.Status.Equals(ApplicationStatus.Accepted))
        {
            args.Row.AddClass(new string[] { "bg-success", "text-white" });
        }
        else if (args.Data.Status.Equals(ApplicationStatus.Rejected))
        {
            args.Row.AddClass(new string[] { "bg-danger", "text-white" });
        }
    }
    private async Task<bool> GetLastApplication()
    {
        applicationStage = await _applicationStagesHttpService.GetByIdAsync("api/ApplicationStages/lastStage");
        return await Task.FromResult(applicationStage.StageStatus.Equals(StageStatus.Opened) && applicationStage.EndTime > DateTime.Now);
    }
}
